import pygame
import sys
import os

pygame.init()
WIDTH, HEIGHT = 1200, 800
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("üéÆ Quiz Game")

# Fonts
FONT = pygame.font.SysFont("assets/FONT.ttf", 30)
BIG_FONT = pygame.font.SysFont("assets/FONT.ttf", 50)
CLOCK = pygame.time.Clock()

# M√†u s·∫Øc theo y√™u c·∫ßu
DARK_BLUE = (0, 9, 87)        
MID_BLUE = (52, 76, 183)      
LIGHT_BLUE = (57, 91, 80)
YELLOW = (255, 235, 0)      
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
GRAY = (31, 47, 22)
GREEN = (146, 175, 215) 
RED = (230, 100, 100)
BLUE = (100, 170, 255)

# N·ªÅn
bg_image = pygame.image.load(os.path.join("assets", "soft_gradient_bg.jpg"))
bg_image = pygame.transform.scale(bg_image, (WIDTH, HEIGHT))

# C√¢u h·ªèi kh√¥ng randomquestions = [
questions = [
    {
        "question": "Le trouble de stress post-traumatique (TSPT) survient g√©n√©ralement apr√®s :",
        "choices": [
            "Un r√™ve √©trange",
            "Une blessure physique l√©g√®re",
            "Une exp√©rience extr√™mement douloureuse ou terrifiante",
            "Un √©v√©nement joyeux et inattendu"
        ],
        "answer": 2
    },
    {
        "question": "Pourquoi certains anciens combattants comme M. Philippe sont-ils souvent incompris ou stigmatis√©s dans la soci√©t√© ?",
        "choices": [
            "Parce qu'ils refusent de parler de leur pass√©",
            "Parce que la communaut√© manque de connaissances sur les traumatismes psychologiques",
            "Parce qu'ils vivent isol√©s",
            "Parce qu'ils sont √¢g√©s et excentriques"
        ],
        "answer": 1
    },
    {
        "question": "Certaines personnes dans la ville pensent que M. Philippe 'fait semblant'. Laquelle des affirmations suivantes est vraie √† propos du TSPT ?",
        "choices": [
            "Le TSPT est une faiblesse mentale, il suffit de penser positivement pour gu√©rir",
            "Le TSPT ne survient que juste apr√®s un √©v√©nement traumatisant et ne peut pas durer des ann√©es",
            "Le TSPT est un v√©ritable trouble psychologique, pouvant affecter les √©motions, la m√©moire et le comportement",
            "Les anciens soldats souffrent rarement de TSPT car ils sont habitu√©s aux traumatismes"
        ],
        "answer": 2
    },
    {
        "question": "Que repr√©sente l'ODD 16 ?",
        "choices": [
            "La technologie verte",
            "L'√©ducation mondiale",
            "La paix, la justice et des institutions efficaces",
            "Le tourisme durable"
        ],
        "answer": 2
    },
    {
        "question": "Dans le contexte de l'ODD 16, laquelle des actions suivantes ne contribue pas √† construire une soci√©t√© pacifique et √©quitable ?",
        "choices": [
            "Encourager le dialogue entre les g√©n√©rations",
            "Exclure les personnes atteintes de troubles psychologiques",
            "Respecter la v√©rit√© et √©couter les personnes vuln√©rables",
            "R√©duire la stigmatisation dans la communaut√©"
        ],
        "answer": 1
    },
    {
        "question": "Selon l'esprit de l'ODD 16, que devrait faire une communaut√© lorsqu'une personne vit isol√©e en raison d'un traumatisme ?",
        "choices": [
            "L'ignorer pour √©viter les probl√®mes",
            "Chercher √† cr√©er des liens, l'√©couter et l'aider √† se r√©int√©grer",
            "La confier aux autorit√©s comp√©tentes",
            "L'utiliser comme exemple pour avertir les autres"
        ],
        "answer": 1
    },
    {
        "question": "Quel comportement refl√®te v√©ritablement l'esprit de l'ODD 16 ?",
        "choices": [
            "Garder le silence face √† l'injustice",
            "Juger les autres uniquement sur leur apparence",
            "Propager des rumeurs sur les autres",
            "Cr√©er un espace s√ªr o√π chacun peut s'exprimer et √™tre √©cout√©"
        ],
        "answer": 3
    },
    {
        "question": "Pourquoi juger une personne uniquement sur des rumeurs ou son pass√© va-t-il √† l'encontre de l'esprit de l'ODD 16 ?",
        "choices": [
            "Parce que cela aide la soci√©t√© √† se prot√©ger contre les dangers potentiels",
            "Parce que chacun a droit au respect et √† un jugement √©quitable, sans pr√©jug√©s",
            "Parce que seuls les proches peuvent juger une personne correctement",
            "Parce que le pass√© se r√©p√®te toujours et ne peut pas √™tre chang√©"
        ],
        "answer": 1
    }
]


# Tr·∫°ng th√°i game
current_q = 0
correct = 0
selected_choice = None
show_result = False
result_time = 0
game_state = "playing"

# Typewriter
typed_text = ""
type_index = 0
type_time = 0
TYPE_SPEED = 30  # ms per char

def wrap_text(text, font, max_width):
    words = text.split(' ')
    lines = []
    current_line = ""
    
    for word in words:
        test_line = current_line + word + " "
        if font.size(test_line)[0] <= max_width:
            current_line = test_line
        else:
            lines.append(current_line.strip())
            current_line = word + " "
    if current_line:
        lines.append(current_line.strip())
    return lines

def draw_question(q, selected=None, show_result=False):
    global typed_text
    screen.blit(bg_image, (0, 0))

    # Khung c√¢u h·ªèi
    question_box = pygame.Rect(100, 80, WIDTH - 200, 140)
    pygame.draw.rect(screen, (197, 209, 235), question_box, border_radius=30)
    pygame.draw.rect(screen, (128, 128, 128), question_box, 5, border_radius=30)

    # Hi·ªÉn th·ªã c√¢u h·ªèi (c√≥ xu·ªëng d√≤ng)
    lines = wrap_text(typed_text, FONT, question_box.width - 40)
    for i, line in enumerate(lines):
        text_surface = FONT.render(line, True, BLACK)
        screen.blit(text_surface, (question_box.x + 20, question_box.y + 20 + i * 35))

    # Hi·ªÉn th·ªã c√°c l·ª±a ch·ªçn (c√≥ xu·ªëng d√≤ng)
    for i, choice in enumerate(q["choices"]):
        rect = pygame.Rect(130, 260 + i * 100, 980, 80)
        color = YELLOW
        if show_result:
            if i == q["answer"]:
                color = (57, 91, 80)  # ƒê√∫ng th√¨ xanh l√°
            elif i == selected:
                color = RED          # Sai th√¨ ƒë·ªè
        elif i == selected:
            color = BLUE
        elif rect.collidepoint(pygame.mouse.get_pos()):
            color = LIGHT_BLUE

        pygame.draw.rect(screen, color, rect, border_radius=15)
        pygame.draw.rect(screen, (128, 128, 128), rect, 4, border_radius=15)

        # D√≤ng xu·ªëng d√≤ng cho m·ªói l·ª±a ch·ªçn
        choice_lines = wrap_text(choice, FONT, rect.width - 40)
        for j, line in enumerate(choice_lines):
            text_surface = FONT.render(line, True, BLACK)
            screen.blit(text_surface, (rect.x + 20, rect.y + 10 + j * 25))

    # Hi·ªÉn th·ªã s·ªë c√¢u ƒë√∫ng
    progress_text = FONT.render(f"{correct} correct / 8", True, LIGHT_BLUE)
    screen.blit(progress_text, (20, 20))


def get_choice(pos):
    for i in range(4):
        rect = pygame.Rect(200, 260 + i * 100, 800, 70)
        if rect.collidepoint(pos):
            return i
    return None

def draw_end_screen(result):
    screen.blit(bg_image, (0, 0))
    msg = "üéâ B·∫°n ƒë√£ th·∫Øng!" if result == "win" else "Vous avez perdu. Il vous faut au moins 6/8 de bonnes r√©ponses."
    label = BIG_FONT.render(msg, True, YELLOW)
    screen.blit(label, (WIDTH//2 - label.get_width()//2, 250))
    retry_btn = pygame.Rect(WIDTH//2 - 120, 400, 240, 70)
    pygame.draw.rect(screen, LIGHT_BLUE, retry_btn, border_radius=6)
    pygame.draw.rect(screen, BLACK, retry_btn, 4, border_radius=6)
    text = FONT.render("Ch∆°i l·∫°i", True, BLACK)
    screen.blit(text, (retry_btn.x + 70, retry_btn.y + 20))
    return retry_btn

def reset_game():
    global current_q, correct, selected_choice, show_result, result_time, game_state
    global typed_text, type_index
    current_q = 0
    correct = 0
    selected_choice = None
    show_result = False
    result_time = 0
    typed_text = ""
    type_index = 0
    game_state = "playing"

# Main loop
running = True
while running:
    if game_state == "playing":
        draw_question(questions[current_q], selected_choice, show_result)
        # Hi·ªáu ·ª©ng typewriter
        if not show_result:
            full_text = questions[current_q]["question"]
            if type_index < len(full_text):
                now = pygame.time.get_ticks()
                if now - type_time > TYPE_SPEED:
                    typed_text += full_text[type_index]
                    type_index += 1
                    type_time = now

    elif game_state in ["win", "lose"]:
        retry_btn = draw_end_screen(game_state)

    pygame.display.flip()

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

        elif event.type == pygame.MOUSEBUTTONDOWN:
            if game_state == "playing" and not show_result:
                selected = get_choice(event.pos)
                if selected is not None:
                    selected_choice = selected
                    show_result = True
                    result_time = pygame.time.get_ticks()
                    if selected == questions[current_q]["answer"]:
                        correct += 1
            elif game_state in ["win", "lose"]:
                if retry_btn.collidepoint(event.pos):
                    reset_game()

    if show_result and pygame.time.get_ticks() - result_time > 1200:
        current_q += 1
        selected_choice = None
        show_result = False
        typed_text = ""
        type_index = 0
        if current_q >= len(questions):
            game_state = "win" if correct >= 6 else "lose"

    CLOCK.tick(60)

pygame.quit()
sys.exit()
